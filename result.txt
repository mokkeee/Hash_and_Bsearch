■測定
15000件のIPアドレス検索において、二分検索とハッシュ検索の
どちらがどれだけ性能がよいか、確認を行う。


■環境
CentOS 5.8 (kernel: 2.6.18-308.20.1.el5) (VirtualBox仮想インストール)
gcc バージョン 4.1.2 20080704 (Red Hat 4.1.2-54)



■IPアドレスリスト作成
15000件のランダムなIPアドレスのリストを作成。
IPアドレスリストは、一つの第一〜第三オクテットの組に対し、
異なる第四オクテットの値100個を設定したIPアドレスを出力。
それぞれのオクテット値はランダム値。
ただし、全く同じIPアドレスが複数回生成されることがないようなガードを行っている。
------------------------------------------------------------------------
$ ./create_iplist.pl > iplist.txt
$ ./create_iplist.pl > iplist.txt2
$ ./create_iplist.pl > iplist.txt3
$ ./create_iplist.pl > iplist.txt4
$ ./create_iplist.pl > iplist.txt5
$ ./create_iplist.pl > iplist.txt6
------------------------------------------------------------------------


■ハッシュ計算方法
プログラム上、通信相手のIPアドレスは必ず取得出来るであろうことから、
IPv4アドレスを使用して、以下の計算式で計算することとした。
------------------------------------------------------------------------------------------------------------
ハッシュ値＝（IPv4アドレス値(ネットワークオーダの4byte数値) * ハッシュ係数） ％ ハッシュテーブルサイズ
------------------------------------------------------------------------------------------------------------


■ハッシュ値の決定
生成したIPアドレスリストを使用して、メモリ使用効率が良くなるような
ハッシュテーブルサイズとハッシュ係数を求めた。
結果、ハッシュテーブルサイズ10000、ハッシュ係数31を使用したとき、
ハッシュテーブルサイズに対して、ハッシュ値のバリエーションが
効率よく生成されたので、測定ではこの値を使用することとした。
------------------------------------------------------------------------
$ ./check_hash.pl 10001 31 iplist.txt
生成されたハッシュの数：7726
シノニムの深さ最大値：7
$ ./check_hash.pl 10001 31 iplist.txt2
生成されたハッシュの数：7509
シノニムの深さ最大値：8
$ ./check_hash.pl 10001 31 iplist.txt3
生成されたハッシュの数：7995
シノニムの深さ最大値：7
$ ./check_hash.pl 10001 31 iplist.txt4
生成されたハッシュの数：7885
シノニムの深さ最大値：9
$ ./check_hash.pl 10001 31 iplist.txt5
生成されたハッシュの数：7695
シノニムの深さ最大値：8
$ ./check_hash.pl 10001 31 iplist.txt6
生成されたハッシュの数：7544
シノニムの深さ最大値：7
------------------------------------------------------------------------
ハッシュテーブルのサイズ10001に対し、7500〜7900程度のハッシュ値が生成された。


■測定プログラム仕様
以下の仕様のプログラムを作成。

・「IPアドレスリスト作成」で作成したIPアドレスリストを読み込み、
 2分検索用テーブル、ハッシュテーブルを生成。
 ハッシュテーブルの作成は、自前で実装し、
 ハッシュテーブルサイズ10000、ハッシュ係数31を使用。
 (ハッシュテーブルライブラリについては未使用)

・それぞれ作成したテーブルに対し、IPアドレスリストの
  各IPアドレス値(15,000個)を10,000回ずつ検索(合計：150,000,000回)し、
  その検索にかかった時間を求める。


■コンパイル
最適化オプション(-O3)付きでコンパイルしている
------------------------------------------------------------------------
$ bash make.performance.sh 
------------------------------------------------------------------------


■測定
各IPアドレスリストファイルについて、複数回ずつ測定した。
------------------------------------------------------------------------
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ for f in iplist.txt iplist.txt?; do ./calc $f 10001 31; done >> performance.txt2
$ cat performance.txt2
二分検索時間,5.485783,ハッシュ検索時間,0.859212
二分検索時間,5.664515,ハッシュ検索時間,0.921476
二分検索時間,5.547804,ハッシュ検索時間,0.860437
二分検索時間,5.582018,ハッシュ検索時間,0.862026
二分検索時間,5.568746,ハッシュ検索時間,0.883766
二分検索時間,5.702439,ハッシュ検索時間,0.870023
二分検索時間,5.577074,ハッシュ検索時間,0.850350
二分検索時間,5.503385,ハッシュ検索時間,0.850622
二分検索時間,5.507546,ハッシュ検索時間,0.851092
二分検索時間,5.515548,ハッシュ検索時間,0.866844
二分検索時間,5.745327,ハッシュ検索時間,0.859608
二分検索時間,5.647447,ハッシュ検索時間,0.891915
二分検索時間,5.557455,ハッシュ検索時間,0.851631
二分検索時間,5.566973,ハッシュ検索時間,0.851960
二分検索時間,5.522599,ハッシュ検索時間,0.842857
二分検索時間,5.568281,ハッシュ検索時間,0.894717
二分検索時間,5.607107,ハッシュ検索時間,0.873713
二分検索時間,5.543465,ハッシュ検索時間,0.839433
二分検索時間,5.506477,ハッシュ検索時間,0.860433
二分検索時間,5.716705,ハッシュ検索時間,0.853153
二分検索時間,5.642295,ハッシュ検索時間,0.845783
二分検索時間,5.728985,ハッシュ検索時間,0.851727
二分検索時間,5.562161,ハッシュ検索時間,0.870869
二分検索時間,5.507101,ハッシュ検索時間,0.838851
二分検索時間,5.598511,ハッシュ検索時間,0.846176
二分検索時間,5.555766,ハッシュ検索時間,0.861668
二分検索時間,5.570499,ハッシュ検索時間,0.861862
二分検索時間,5.543170,ハッシュ検索時間,0.847890
二分検索時間,5.611074,ハッシュ検索時間,0.853869
二分検索時間,5.541930,ハッシュ検索時間,0.877144
二分検索時間,5.561651,ハッシュ検索時間,0.850938
二分検索時間,5.557614,ハッシュ検索時間,0.852808
二分検索時間,5.569561,ハッシュ検索時間,0.853224
二分検索時間,5.585697,ハッシュ検索時間,0.858440
二分検索時間,5.722703,ハッシュ検索時間,0.869795
二分検索時間,5.674045,ハッシュ検索時間,0.868034
二分検索時間,5.564391,ハッシュ検索時間,0.850154
二分検索時間,5.575822,ハッシュ検索時間,0.839930
二分検索時間,5.555633,ハッシュ検索時間,0.852811
二分検索時間,5.593590,ハッシュ検索時間,0.850789
二分検索時間,5.545877,ハッシュ検索時間,1.024897
二分検索時間,5.584816,ハッシュ検索時間,0.847027
二分検索時間,5.552988,ハッシュ検索時間,0.856739
二分検索時間,5.575069,ハッシュ検索時間,0.860953
二分検索時間,5.607628,ハッシュ検索時間,0.850341
二分検索時間,5.507706,ハッシュ検索時間,0.850809
二分検索時間,5.573435,ハッシュ検索時間,0.854923
二分検索時間,5.535010,ハッシュ検索時間,0.842912
------------------------------------------------------------------------
平均処理時間：
 二分検索    ：5.582112958(s)
 ハッシュ検索：0.862221479(s)


■結論
上記の測定結果より、
ハッシュ検索の性能は、二分検索の性能よりも、
6.5倍程度高いという結果となった。


■追加検証
前の報告時に作成したハッシュ検索プログラムで
ハッシュ計算で桁あふれが発生しうる
プログラムになっていた事に気がついたため、
桁あふれしないようにハッシュ計算する
プログラムとしたところ、
性能が大きく落ちるという結果が出ました。


現行のハッシュ計算
addrval、hash_coefficient_kの値によって
unit32_tの範囲に収まらず、桁あふれが発生しうる
------------------------------------------------
static uint32_t get_hash(uint32_t addrval) {
        return (uint32_t)((addrval * hash_coefficient_k) % hash_size_n);
}
------------------------------------------------
⇒処理時間：0.79秒 (本関数は150,000,000回実行)


桁あふれが発生しないように修正したハッシュ計算
------------------------------------------------
static uint32_t get_hash(uint32_t addrval) {
        unsigned long tmp = addrval * hash_coefficient_k;
        return (uint32_t)(tmp % hash_size_n);
}
------------------------------------------------
⇒処理時間：1.65秒 (本関数は150,000,000回実行)
  unsigned longの数値計算としたしただけで、処理時間が倍になった





intとlongの性能差原因について確認してみました。
結論としては、剰余算の処理コストが
intとlongで大きく違うことが原因のようです。

簡単なプログラムで確認してみました。
使用したプログラムを添付しています。
両者のプログラムの差分は、
剰余算(8,11行目の「% n」)の有無のみです。

剰余計算あり
intとlongで倍以上の性能差
----------------------------------------------
$ cc -O3 int_long_with_remainder.c
$ ./a.out 
get_int  : 7.838112
get_long : 18.602015
get_int  : 7.985287
get_long : 18.624271

----------------------------------------------

剰余計算なし
intとlongでほぼ同値の性能
----------------------------------------------
$ cc -O3 int_long_without_remainder.c
$ ./a.out 
get_int  : 0.665883
get_long : 0.675374
get_int  : 0.662465
get_long : 0.674391
----------------------------------------------

